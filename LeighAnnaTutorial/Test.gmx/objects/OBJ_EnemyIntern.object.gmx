<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_EnemyIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>OBJ_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Speed = 5;
SpeedMod = 1;

MaxHP = 80;
CurrentHP = MaxHP;

OnGround = true;
GroundY = y;

image_speed = .75;

SideMod = 1;

State = "Inactive";

SightRange = 350;

Aggressiveness = 0;
AttackRange = 350;          //Since it's a projectile enemy, the AttackRange should be just 
                            //as far as the Sight Range, maybe?

TargetX = x;
TargetY = y;

                            //These are test variables for attack movement
NewPosReached = false;      //One location the intern can run to. 
CurX = x;                   //I was trying to store the CurX position so that when the enemy flees, 
                            //the somewhat random location should be stored as soon as it gets there...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var MyPosition = ds_list_find_index(OBJ_Player.EnemyList, id);

if(MyPosition != noone){
    ds_list_delete(OBJ_Player.EnemyList, MyPosition);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>State = "Fleeing"; //So it flees when it gets hit.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(CurrentHP &lt;= 0) {
    instance_destroy();
}

event_user(0);

switch (State){
    case "Idle":
        event_user(3); //Animate the Enemy
        event_user(1); //Check to see if the enemy should attack
        break;
 
    case "PositionFront":
        SideMod = 1;
        event_user(5); //Move the Enemy to the Location set in event_user(4)
        event_user(4); //Set Target Location for Motion
        event_user(3); //Animate the Enemy
        event_user(1); //Check to see if the enemy should attack
        break;
 
    case "PositionBehind":
        SideMod = -1;
        event_user(5); //Move the Enemy to the Location set in event_user(4)
        event_user(4); //Set Target Location for Motion
        event_user(3); //Animate the Enemy
        event_user(1); //Check to see if the enemy should attack
        break;
        
    case "Hit":
        event_user(3); //Animate the Enemy
        //event_user(4);
        //event_user(5);
        break;
        
    case "Queueing":
        event_user(3); //Animate the Enemy
        break;
        
    case "Fleeing":
        event_user(3); //Animate the Enemy
        event_user(4); //Set Target Location for Motion
        event_user(5); //Move the Enemy to the Location set in event_user(4)
        break;
        
    case "Attacking":
        event_user(4); //Set Target Location for Motion
        event_user(5); //Move the Enemy to the Location set in event_user(4)
        break;
}

if(OnGround == true){
    GroundY = y;
}

depth = -1 * GroundY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(point_distance(x,y,TargetX,TargetY) &gt;= Speed){
    move_towards_point(TargetX,TargetY,Speed);
    
    
    if(point_distance(x,y,TargetX,TargetY) &lt; 200 &amp;&amp; ds_list_size(OBJ_Player.EnemyList) &lt; 2 &amp;&amp; ds_list_find_index(OBJ_Player.EnemyList,id) == -1){
        ds_list_add(OBJ_Player.EnemyList, id);
    }

}else{
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(State) { 
    case "Attacking":
            //So if the Enemy is PositionFront and at starting position...
        if(sign(SideMod) == 1 &amp;&amp; NewPosReached == false) {
            //Mark a random positon as new position
            TargetX = CurX - 100;
            //Change the flag
            NewPosReached = true;
            //So if the Enemy is PositionFront but already moved to New Position...
        } else if(sign(SideMod) == 1 &amp;&amp; NewPosReached == true) {
            TargetX = CurX + 100;
            NewPosReached = false;
        } else if(sign(SideMod) == -1 &amp;&amp; NewPosReached == false) {
            TargetX = CurX + 100;
            NewPosReached = true;
        } else if(sign(SideMod) == -1 &amp;&amp; NewPosReached == true) {
            TargetX = CurX - 100;
            NewPosReached = false;
        }
        break;
   
    case "Fleeing": 
        if(point_distance(TargetX,TargetY,OBJ_Player.x,OBJ_Player.y) &gt; AttackRange || point_distance(TargetX,TargetY,OBJ_Player.x,OBJ_Player.y) &lt; 50 || abs(TargetY-OBJ_Player.y) &gt; LayerSize || sign(TargetX-OBJ_Player.x) != sign(SideMod)){
            //TargetX = random_range(OBJ_Player.x+60*SideMod, OBJ_Player.x+90*SideMod);
            //TargetY = random_range(OBJ_Player.y-10, OBJ_Player.y+10);
            
            //If it's facing a certain way...
            //Flee backwards and in a random y positon (subject to change)
            if(sign(SideMod) == 1) {            
                TargetX = OBJ_Player.x - 300;   
                TargetY = random_range(OBJ_Player.y - 100, OBJ_Player.y + 100)      
            } else {
                TargetX = OBJ_Player.x + 300;
                TargetY = random_range(OBJ_Player.y - 100, OBJ_Player.y + 100)
            }
        }
        State = "Idle"; //Stops the Enemy from Fleeing.
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(State){
    case "Idle":
        sprite_index = SPR_EnemyIdle;
        break;
         
    case "PositionFront":
    case "PositionBehind":
    case "Fleeing":
        if(point_distance(x,y,TargetX,TargetY) &gt; 50){
            image_xscale = sign(TargetX-x);
        }else{
            image_xscale = sign(OBJ_Player.x-TargetX);
        }
        
        if(speed != 0){
            sprite_index = SPR_EnemyWalking;
        }else{
            sprite_index = SPR_EnemyIdle;
        }
        break;
        
    case "Hit":
        sprite_index = SPR_EnemyHit;
        break;
    
    case "Queueing":
        if(point_distance(x,y,TargetX,TargetY) &gt; 150){
            image_xscale = sign(TargetX-x);
        }else{
            image_xscale = sign(OBJ_Player.x-TargetX);
        }
        
        if(speed != 0){
            sprite_index = SPR_EnemyWalking;
        }else{
            sprite_index = SPR_EnemyIdle;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(OBJ_Player.CurrentHP &gt; 0)
{
    AttackChance = random(100);
    
    if(Aggressiveness &gt; .50) //Just a random attack chance, subject to change
    {
        sprite_index = SPR_EnemyStrongPunch;
        MyAttack = instance_create(x,y,ATK_EnemyProjectile);
        State = "Attacking";
        Aggressiveness = 0;
        MyAttack.depth = depth;
        //MyAttack.image_xscale = image_xscale;
        //MyAttack.image_speed = image_speed;
        MyAttack.Owner = "Enemy";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(OnGround == true)
{
    if(distance_to_object(OBJ_Player) &lt;= AttackRange)   //&amp;&amp; abs(y-OBJ_Player.y) &lt; LayerSize
    {
        Aggressiveness += .02;
        if(random(1) &lt; Aggressiveness*.03)
        {
            event_user(2);                              //Attack
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var MyAction = floor(random(100));

switch(State){
    case "Idle":
        if(distance_to_object(OBJ_Player) &lt; SightRange){
            if(MyAction &lt;= 50){
                State = "PositionBehind";
            }else{
                State = "PositionFront";
            }
        }
        break;
        
    case "PositionFront":
    case "PositionBehind": 
        if(instance_place(TargetX,TargetY,OBJ_Enemy) != noone &amp;&amp; instance_place(TargetX,TargetY,OBJ_Enemy) != id){
            if(State == "PositionFront"){
                State = "PositionBehind";
            }else{
                State = "PositionFront";
            }
        }
        if(ds_list_size(OBJ_Player.EnemyList) &gt;= 2 &amp;&amp; ds_list_find_index(OBJ_Player.EnemyList,id) == -1){
            State = "Queueing";
            speed = 0;
        }
        break;
        
    case "Queueing":
        if(ds_list_size(OBJ_Player.EnemyList) &lt; 2){
            ds_list_add(OBJ_Player.EnemyList, id);
            if(x &lt; OBJ_Player.x){
                State = "PositionBehind";
            }else{
                State = "PositionFront";
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(State == "Attacking" &amp;&amp; OnGround == true){ //End the Attacking Animation
    State = "Idle";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the opacity to 60% and then draw a dark gray oval for the shadow.
draw_set_alpha(.6);
draw_set_color(c_dkgray);
draw_ellipse(x-40,y-8,x+40,y+8,false);
 
//Draw my own sprite.
draw_set_alpha(1);
draw_self();

draw_text(x,y,State);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
