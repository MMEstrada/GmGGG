<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_PlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Player
Speed = 12;
SpeedMod = 1;
XSpeed = 0;
YSpeed = 0;

IsAttacking = false;
AttackType = 0;
MaxHP = 100; 
CurrentHP = MaxHP;
IsHit = false;

OnGround = true;
GroundY = y;

image_speed = .75;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(CurrentHP &gt; 0){

    //Checks if either the A or D buttons are pressed to make the player move Left or Right.
    XSpeed = 0;
    if(keyboard_check(ord('A'))){
        XSpeed = -1*Speed;
    }else if(keyboard_check(ord('D'))){
        XSpeed = Speed;
    }
    
    //Checks if either the W or S buttons are pressed to make the player move Up or Down.
    YSpeed = 0;
    if(OnGround == true){
        if(keyboard_check(ord('W'))){
            YSpeed = -1*Speed;
        }else if(keyboard_check(ord('S'))){
            YSpeed = Speed;
        }
    }
    
    if(IsAttacking == false &amp;&amp; IsHit = false){
        if(OnGround == true){
            if(XSpeed != 0 &amp;&amp; YSpeed != 0){
                x+=XSpeed*SpeedMod*.7;
                y+=YSpeed*SpeedMod*.7;
            }else if(XSpeed != 0 || YSpeed != 0){
                x+=XSpeed*SpeedMod;
                y+=YSpeed*SpeedMod;
            }
            
        }else if(OnGround == false ){
            x+=XSpeed*SpeedMod;
        }

        if(XSpeed != 0){
            image_xscale = sign(XSpeed*SpeedMod);
    }

        //Animates the Player based on their speed
        if(XSpeed == 0 &amp;&amp; YSpeed == 0 &amp;&amp; OnGround == true){
            SpeedMod = 1;
            sprite_index = SPR_PlayerIdle;
        }else if((XSpeed!=0 || YSpeed != 0) &amp;&amp; sprite_index!=SPR_PlayerWalking &amp;&amp; OnGround == true){
            sprite_index = SPR_PlayerWalking;
        }
    }

}  else{
instance_destroy();
}

//If the player is on the ground, this sets their GroundY variable to their current y position
if(OnGround == true){
    GroundY = y;
}

//Sets the Players' depth based on their GroundY. We're using GroundY instead of y so that even when they're in the air, they will display in fornt of and behind the right objects.
depth = -1*GroundY;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var MyAttack = 0;

if(IsHit == false &amp;&amp; CurrentHP &gt; 0) {
    if(AttackType == "Basic Punch") {
        sprite_index = SPR_PlayerBasicPunch;
        MyAttack = instance_create(x,y,ATK_BasicaPunch);
    }
}

if(MyAttack != 0) {
    SpeedMod = 0;
    IsAttacking = true;
    MyAttack.image_xscale = image_xscale;
    MyAttack.image_speed = image_speed;
    MyAttack.Owner = "Player";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(IsAttacking == true) {
    IsAttacking = false;
    SpeedMod = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the opacity to 60% and then draw a dark gray oval for the shadow.
draw_set_alpha(.6);
draw_set_color(c_dkgray);
draw_ellipse(x-40,y-8,x+40,y+8,false);

//Draw my own sprite.
draw_set_alpha(1);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AttackType = "";

if(keyboard_check(vk_numpad4) || keyboard_check(ord('J')) || keyboard_check(vk_left)) {
    AttackType = "Basic Punch";
}

if(OnGround == true) {
    event_user(2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
