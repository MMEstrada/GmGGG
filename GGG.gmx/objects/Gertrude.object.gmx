<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>GertrudeIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Speed = 12;
SpeedMod = 1;
XSpeed = 0;
YSpeed = 0;
FacingLeft = false;

IsAttacking = false;
AttackType = 0;
MaxHP = 100;
CurrentHP = MaxHP;
IsHit = false;

OnGround = true;
GroundY = y;

image_speed = .2;

PlayerHeight = sprite_height;
PlayerWidth = sprite_width;
PlayerLeftEdge = x - PlayerWidth/2;
PlayerRightEdge = x + PlayerWidth/2;
PlayerTopEdge = y - PlayerHeight/2;
PlayerBottomEdge = y + PlayerHeight/2;

show_message("Player Edges are: " + string(PlayerLeftEdge) + " " + string(PlayerRightEdge) + " " + string(PlayerTopEdge) + " " + string(PlayerBottomEdge));


RoomX = room_width/2;
RoomY = room_height/2;
RoomLeftEdge = RoomX - room_width/2;
RoomRightEdge = RoomX;
RoomTopEdge = RoomY;
RoomBottomEdge = RoomY + room_height/2;

show_message("Room Edges are: " + string(RoomLeftEdge) + " " + string(RoomRightEdge) + " " + string(RoomTopEdge) + " " + string(RoomBottomEdge));

MyCamera = instance_create(x, y, OBJ_Camera);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (CurrentHP &gt; 0)
{
    XSpeed = 0;
    if (keyboard_check(ord('A')))
    {
        XSpeed = -1*Speed;
        FacingLeft = true;
    }
    else if (keyboard_check(ord('D')))
    {
        XSpeed = Speed;
        FacingLeft = false;
    }
    
    YSpeed = 0;
    if (OnGround == true)
    {
        if (keyboard_check(ord('W')))
        {
            YSpeed = -1*Speed;
        }
        else if (keyboard_check(ord('S')))
        {
            YSpeed = Speed;
        }
    }
    
    if(IsAttacking == false &amp;&amp; IsHit == false)
    {
        if (OnGround == true)
        {
            if (XSpeed != 0 &amp;&amp; YSpeed != 0)
            {
                x += XSpeed*SpeedMod*0.7;
                y += YSpeed*SpeedMod*0.7;
            }
            else if (XSpeed != 0 || YSpeed != 0)
            {
                x += XSpeed*SpeedMod;
                y += YSpeed*SpeedMod;
            }
        }
        else if (OnGround == false)
        {
            x += XSpeed*SpeedMod;
        }
    }
    
    if (/*FacingLeft == false &amp;&amp;*/ XSpeed == 0 &amp;&amp; YSpeed == 0 &amp;&amp; OnGround == true)
    {
        //image_xscale = 1;
        SpeedMod = 1;
        image_speed = 0.2;
        if (FacingLeft == false)
        {
            image_xscale = 1;   
        }
        else //FacingLeft == true
        {
            image_xscale = -1;
        }
        sprite_index = GertrudeIdle;
        /*if (image_index == GertrudeIdle &amp;&amp; FacingLeft == false)
        {
            image_xscale = 1;
        }
        else if (image_index == GertrudeIdle &amp;&amp; FacingLeft == true)
        {
            image_xscale = -1;
        }*/
    }
    /*
    else if (FacingLeft == true &amp;&amp; XSpeed == 0 &amp;&amp; YSpeed == 0 &amp;&amp; OnGround == true)
    {
        //image_xscale = -1;
        SpeedMod = 1;
        image_speed = 0.2;
        sprite_index = GertrudeIdle;
    }
    */
    else if (YSpeed != 0)
    {
        if (FacingLeft == false &amp;&amp; XSpeed &gt; 0 &amp;&amp; sprite_index != GertrudeRight &amp;&amp; OnGround == true)
        {
            image_xscale = 1;
            image_speed = 0.4;
            sprite_index = GertrudeRight;
        }
        else if (FacingLeft == true &amp;&amp; XSpeed &lt; 0 &amp;&amp; sprite_index != GertrudeLeft &amp;&amp; OnGround == true)
        {
            image_xscale = 1;
            image_speed = 0.4;
            sprite_index = GertrudeLeft;
        }
        else if (FacingLeft == false &amp;&amp; XSpeed == 0 &amp;&amp; sprite_index != GertrudeRight &amp;&amp; OnGround == true)
        {
            image_xscale = 1;
            image_speed = 0.4;
            sprite_index = GertrudeRight;
        }
        else if (FacingLeft == true &amp;&amp; XSpeed == 0 &amp;&amp; sprite_index != GertrudeLeft &amp;&amp; OnGround == true)
        {
            image_xscale = 1;
            image_speed = 0.4;
            sprite_index = GertrudeLeft;
        }
    }
    else if (YSpeed == 0)
    {
        if (FacingLeft == false &amp;&amp; XSpeed &gt; 0 &amp;&amp; sprite_index != GertrudeRight &amp;&amp; OnGround == true)
        {
            image_xscale = 1;
            image_speed = 0.4;
            sprite_index = GertrudeRight;
        }
        else if (FacingLeft == true &amp;&amp; XSpeed &lt; 0 &amp;&amp; sprite_index != GertrudeLeft &amp;&amp; OnGround == true)
        {
            image_xscale = 1;
            image_speed = 0.4;
            sprite_index = GertrudeLeft;
        }
    }
}
else
{
    instance_destroy();
}

if (OnGround == true)
{
    GroundY = y;
}
    
depth = -1 * GroundY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(.6);
draw_set_color(c_dkgray);
draw_ellipse(x-40, y-8, x+40, y+8, false);

draw_set_alpha(1);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
