<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_PlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Speed = 12;
SpeedMod = 1;
XSpeed = 0;
YSpeed = 0;

IsAttacking = false;
AttackType = 0;
MaxHP = 100;
CurrentHP = MaxHP;
IsHit = false;

OnGround = true;
GroundY = y;

image_speed = .75;

MyCamera = instance_create(x,y,OBJ_Camera);

EnemyList = ds_list_create();

CommandList = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsHit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_clear(CommandList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var MyBr = instance_nearest(x,y,OBJ_BattleRegion);

if (CurrentHP &gt; 0)
{
    XSpeed = 0;
    if(keyboard_check(ord('A')))
    {
        XSpeed = -1*Speed;
    }
    else if(keyboard_check(ord('D')))
    {
        XSpeed = Speed;
    }
    
    YSpeed = 0;
    if(OnGround == true)
    {
        if(keyboard_check(ord('W')))
        {
            YSpeed = -1*Speed;
        }
        else if(keyboard_check(ord('S')))
        {
            YSpeed = Speed;
        }
    }
    
    if(IsAttacking == false &amp;&amp; IsHit == false)
    {
        if(MyBr.IsActive == true)
        {
            if(point_in_rectangle(x+XSpeed*SpeedMod, y, MyBr.LeftEdge+35, MyBr.TopEdge, MyBr.RightEdge-35, MyBr.BottomEdge) == false || place_free(x+XSpeed*SpeedMod, y) == false)
            {
                XSpeed = 0;
            }
            
            if(point_in_rectangle(x, y+YSpeed*SpeedMod, MyBr.LeftEdge+35, MyBr.TopEdge, MyBr.RightEdge-35, MyBr.BottomEdge) == false || place_free(x, y+XSpeed*SpeedMod) == false)
            {
                YSpeed = 0;
            }
        }
        if(OnGround == true)
        {
            if(XSpeed != 0 &amp;&amp; YSpeed != 0)
            {
                x += XSpeed * SpeedMod * .7;
                y += YSpeed * SpeedMod * .7;
            }
            else if(XSpeed != 0 || YSpeed != 0)
            {
                x += XSpeed * SpeedMod;
                y += YSpeed * SpeedMod;
            }
        }
        else if(OnGround == false)
        {
            x += XSpeed * SpeedMod;
        }
        
        if(XSpeed != 0)
        {
            image_xscale = sign(XSpeed*SpeedMod);
        }
        
        if(XSpeed == 0 &amp;&amp; YSpeed == 0 &amp;&amp; OnGround == true)
        {
            SpeedMod = 1;
            sprite_index = SPR_PlayerIdle;
        }
        else if (XSpeed != 0 || YSpeed != 0 &amp;&amp; sprite_index != SPR_PlayerWalking &amp;&amp; OnGround == true)
        {
            sprite_index = SPR_PlayerWalking;
        }
        
    }
    else if(IsHit == true)
    {
        sprite_index = SPR_PlayerHit;
    }  
}
else
{
    MyCamera.State = "Dead";
    sprite_index = SPR_PlayerDead;
    if(alarm[1] = -1)
    {
        alarm[1] = 90;
    }
}

if(OnGround = true)
{
    GroundY = y;
}

depth = -1*GroundY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var MyAttack = 0;

if(IsHit == false &amp;&amp; CurrentHP &gt; 0)
{
    if(AttackType == "BasicPunch")
    {
        sprite_index = SPR_PlayerBasicPunch;
        MyAttack = instance_create(x, y, ATK_BasicPunch);
    }
    else if(AttackType == "StrongPunch")
    {
        sprite_index = SPR_PlayerStrongPunch;
        MyAttack = instance_create(x, y, ATK_StrongPunch);
    }
    else if(AttackType == "Uppercut")
    {
        sprite_index = SPR_PlayerUppercut;
        MyAttack = instance_create(x, y, ATK_Uppercut);
    }
    else if(AttackType == "TriplePunch")
    {
        sprite_index = SPR_PlayerTriplePunch;
        MyAttack = instance_create(x, y, ATK_TriplePunch);
    }
}

if(MyAttack != 0)
{
    SpeedMod = 0;
    IsAttacking = true;
    MyAttack.image_xscale = image_xscale;
    MyAttack.image_speed = image_speed;
    MyAttack.Owner = "Player";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(IsAttacking == true)
{
    IsAttacking = false;
    SpeedMod = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_healthbar(20, 15, 100 + 100, 15 + 20, CurrentHP, c_black, c_red, c_green, 0, true, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(.6);
draw_set_colour(c_dkgray);
draw_ellipse(x-40,y-8,x+40,y+8,false);

draw_set_alpha(1);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ButtonCombo = "";
AttackType = "";

if(keyboard_check(vk_numpad4) || keyboard_check(ord('J')) || keyboard_check(vk_left))
{
    ButtonCombo += "+LAtk";
}

if(keyboard_check(vk_numpad8) || keyboard_check(ord('I')) || keyboard_check(vk_up))
{
    ButtonCombo += "+SAtk";
}

ds_list_add(CommandList, string_delete(ButtonCombo, 1, 1));

alarm[0] = 20;

while(ds_list_size(CommandList) &gt; 7)
{
    ds_list_delete(CommandList, 0);
}

if(ds_list_find_value(CommandList, ds_list_size(CommandList) - 1) == "LAtk" &amp;&amp; ds_list_find_value(CommandList, ds_list_size(CommandList) - 2) == "LAtk" &amp;&amp; ds_list_find_value(CommandList, ds_list_size(CommandList) - 3) == "LAtk")
{
    AttackType = "TriplePunch";
}
else if(ds_list_find_value(CommandList, ds_list_size(CommandList) - 1) == "LAtk")
{
    AttackType = "BasicPunch";
}
else if(ds_list_find_value(CommandList, ds_list_size(CommandList) - 1) == "SAtk")
{
    AttackType = "StrongPunch";
}
else if(ds_list_find_value(CommandList, ds_list_size(CommandList) - 1) == "LAtk+SAtk")
{
    AttackType = "Uppercut";
}

if(OnGround == true)
{
    event_user(2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
